#+BLOG: wordpress
#+POSTID: 39
#+DATE: [2014-04-27 Sun 16:58]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: neural networks, haskell, concurrency, functional programming
#+TAGS:
#+DESCRIPTION:
#+TITLE: Meap Scala Notes


* MEAP Scala
  :PROPERTIES:
  :ID:       o2b:ddb66efa-b325-4d09-85e2-c97b4239956c
  :END:
** Chapter 3
*** github
https://github.com/gregnwosu/meapscala
*** syntax 
**** functional traits						      :drill:
- interfaces for functions
- we introduce data types with [traits]
***** sealed trait
- sealed means that all implentations must be in this file, kinda the same as [dinal]
****  other syntax quirks					      :drill:
- each anonymous function has a implicit [apply] method that exposes the interface or [trait] of the function
- the function apply means that a function object can be called implicitly
- square brackets with capitals signify [generics]/[polymorphic] functions
- remember that anonymous functions should be wrapped in [brackets] and can name arguments only at [top] level
- note that applying 1 function after another requires repeated use of [brackets]
- No such thing as point free
#+BEGIN_SRC scala
def uncurry[A,B,C](f: A => B=> C): (A,B)=>C =
(a:A,b:B) => f (a) (b)
#+END_SRC

**** data constructors						      :drill:
- varying forms use the case statement
  - think overloading constructors
- are made by [extend]ing the trait
- each data constructor introduces a pattern
**** collections

***** lists
- lists can be made [polymorphic] with square brackets
- adding a + makes the list [covariant]
- We defined Nil to extend List[Nothing]
  - Nothing mathes all types
  - Therefore because list is covarient
    - Nil has a type [List[A]] for any A
   
******  Variadic functions					      :drill:
what does _* mean? 
#+BEGIN_SRC scala
//recursively applies cons
def apply[A](as: A*): List[A] =
  if (as.isEmpty) Nil
  else Cons(as.head, apply(as.tail: _*))
}
#+END_SRC

******* The Answer
- * is just syntatic sugar for a Seq which are lists or array like structures passed around instead of variable arguments
- as is bound to Seq[A] http://mng.bz/f4k9
- _~* allows us to pass a Seq to a varargs method,
  - a bit like pythonic **
****** covariance
- generally if X is a subtype of Y then 
  - List[X] is a subtupe of List[Y]

****** companion objects
- has the same [name] as our data type
- also has [convience] functions
***** constructor quirks					      :drill:
why is Nil defined with object a and list defined via class
****** TODO The Answer

***** pattern matching
- _ matches any value
#+BEGIN_SRC scala

def sum(ints:List[Int]):Int = ints match {
case Nil => 0
case Cons(x,xs) => x + sum(xs)
}

#+END_SRC


****** syntatical quirks					      :drill:
- need the ints for the match clause 
      -called the [target] or [scrutinee]
- case statements

******* currying						      :drill:
- is done by sepearting out curried terms using [brackets]
- apparently currying makes type infrerence work better
#+BEGIN_SRC scala
call curried items via
g(a) (b)

#+END_SRC


***** foldRight
- replaces cons with f and Nil with its intialiser
- foldRight must traverse all the way to the end of the list (pushing frames onto the call stack as we go) before it can begin collapsing it


#+BEGIN_SRC scala 
def foldRight[A,B](as: List[A], z: B)(f: (A, B) => B): B =
as match {
case Nil => z
case Cons(x, xs) => f(x, foldRight(xs, z)(f))
}

#+END_SRC
***** foldLeft
- pretty much sampe as fold right
- word on the street is that foldl is broken
  - foldl is broken! http://bit.ly/PdqGMB a
- but moves computation inside recurusion 
  - forcing early evaluation
  - use initialiser as an accumulator
#+BEGIN_SRC scala
def foldLeft[A,B](l: List[A], z: B)(f: (B, A) => B): B = 
l match {
  case Nil => z
  case Cons(x,xs) => foldLeft( xs, f(z, x)) (f)
  
}
#+END_SRC


**** algebraeic data types

***** definition
- a datatype with one or more constructors
- a type is the sum of its construstors
- each constructor is the product of its arguments

**** notes on exercises
***** Exercise 23						      :drill:
was unable to define addlists in terms of map foldmap
perhaps there is another way?
#+BEGIN_SRC scala
def addLists(a:List[Int], b:List[Int]): List[Int] = a match { 
  case Nil => b
  case Cons(x,xs) => Cons(x+ head(b), addLists(xs, tail(b)))
}
#+END_SRC

****** TODO The Answer

***** Exercise 24						      :drill:
compiler cant find scanRight
#+BEGIN_SRC scala
def hasSubsequence[A](l: List[A], sub: List[A]): Boolean  =  scanRight (l,Nil:List[A])  ((a:A, b:List[B]) => Cons(a,b)) exists ((c:List[A]) => c == l)
#+END_SRC

***** TODO The Answer
** Chapter 4
*** Exceptions

- Exceptions are context dependent
  - depending on level of block .i,e, where they run they can result in different values
  - therefore are not RT
- Exceptions are not type safe
 - can be assigned to anytype
**** The general rule of thumb					      :drill:
- we use exceptions only if no reasonable program would ever [catch the exception]
â€” if for some callers the exception might be a recoverable error, we use [Option or Either]
***** why not just fail? 					      :drill:
****** TODO The Answer

*** SUMMARY
the bigger idea is that
we can represent exceptions as ordinary values and use higher-order functions to
encapsulate common patterns of handling and propagating errors.

*** Lifting and Mapping						      :drill:
Between map , lift , sequence , traverse , map2 , map3 , and so on, you
should never have to modify any existing functions to work with optional values.
**** map2
a function a function that takes two normal arguments to two functors

***** straight implementation
#+BEGIN_SRC scala
def map2[A,B,C](a: Option[A], b: Option[B])(f: (A, B) => C):
Option[C] =
a flatMap (aa =>
b map (bb =>
f(aa, bb)))
#+END_SRC
- love this nested implementation 
  - we unwrap functors by using map
  - we use flatmap on the outside to combine the nested functors correctly
  - in the inner sanctum we apply map to the naked objects


***** forM implementation
#+BEGIN_SRC scala
def map2[A,B,C](a: Option[A], b: Option[B])(f: (A, B) => C):
Option[C] =
for {
aa <- a
bb <- b
} yield f(aa, bb)

- pretty much the same as haskells do syntax
- recombining is implied
- yield is the same as return

#+END_SRC

**** in general
- We can lift functions to combine Functor behaviour
- flatMap can be used to [combine] two Functors
  - monadic bind
- sequence is used to return monadic None if any element is None
- traverse is more powerful than sequence and is used to map a function over a list which returns a functor and then check for None





****  question about person implementation page 76		      :drill:

#+BEGIN_SRC scala 
case class Person(name: Name, age: Age)
sealed class Name(val value: String)
sealed class Age(val value: Int)

def mkName(name: String): Either[String, Name] =
if (name == "" || name == null) Left("Name is empty.")
else Right(new Name(name))

def mkAge(age: Int): Either[String, Age] =
if (age < 0) Left("Age is out of range.")
else Right(new Age(age))

def mkPerson(name: String, age: Int): Either[String, Person] =
mkName(name).map2(mkAge(age))(Person(_, _))
#+END_SRC

- thus far map2 isnt defined as partially applied , can we really use it here
- is it just that partially applied functions help with types?

**** sequence can be defined in terms of traverse
- the main point is that the function is the identity function 
- (x => x)
#+BEGIN_SRC scala 
def sequence   [A](a: List[Option[A]]): Option[List[A]] = 
traverse (a)(x => x)
#+END_SRC
** Chapter 5
*** Formal definition of strictness
~verbatim~
If the evaluation of an expression runs forever or throws an error
instead of returning a definite value, we say that the expression doesn't
terminate , or that it evaluates to bottom . A function f is strict if the
expression f(x) evaluates to bottom for all x that evaluate to bottom.
~verbatim~
*** thunking
- all functions in scala are strict the non strict thunking operators just wrap/delay
evaluation by wrapping in a function
- values are evaluated each time they are referenced in a function
- we can also use the lazy keyword for making scala evaluate a function only once
#+BEGIN_SRC scala
def maybeTwice2(b: Boolean, i: => Int) = {
   lazy val j = i
    if (b) j+j else 0
 }
maybeTwice: (b: Boolean, i: => Int)Int

#+END_SRC
*** streaminmg							      :drill:

#+BEGIN_SRC scala
sealed trait Stream[+A]
case object Empty extends Stream[Nothing]
case class Cons[+A](h: () => A, t: () => Stream[A]) extends Stream[A]
object Stream {
def cons[A](hd: => A, tl: => Stream[A]): Stream[A] = {
lazy val head = hd
lazy val tail = tl
Cons(() => head, () => tail)
}
def empty[A]: Stream[A] = Empty
def apply[A](as: A*): Stream[A] =
if (as.isEmpty) empty else cons(as.head, apply(as.tail: _*))
}
#+END_SRC

**** notes on streaming 
This type looks identical to our List type, except that the Cons data
constructor takes explicit thunks (the () => A and () => Stream[A] )

- A nonempty stream consists of a head and a tail, which are both non-strict. Due to
technical limitations, these are thunks that must be explicitly forced, rather than
by-name parameters. 
- A "smart" constructor for creating a nonempty stream
- We cache the head and tail as lazy values to avoid repeated evaluation.
- A "smart" constructor for creating an empty stream of a particular type
- A convenient variable-argument method for constructing a Stream from multiple

**** smart constructors
- ensure some additional invarianet
- characterized by a lower case letter but otherwise has the same name of constructor
#+BEGIN_SRC scala
def cons[A](hd: => A, tl: => Stream[A]): Stream[A] = {
lazy val head = hd
lazy val tail = tl
Cons(() => head, () => tail)
}

#+END_SRC
here the lazy head is being thunked this ensures that once its out of the stream the work that it took to produce it isnt repeated

*** exercise 5.1

- strangely to invoke toList here we dont use the brackets
- no arg methods are invoked using no parentheses

- not sure exactly how one references functions first class
- reminder:()   is just shorthand for apply()
- methods are not first class, you can convert method applications to functions seamlessly though
- greg`: methods are mostly a jvm artifact ie every object on jvm has a set of methods associated with it
#+BEGIN_SRC scala

 def toList:List[A]  = this match {
      case Empty => List()
      case Cons(h,t) =>  h() :: t().toList
    }

#+END_SRC


**** irc conversation 
<greg`> can someone help me figure out why http://pastebin.com/vZUvm4V6 wont
	compile?
@@@jasonjckn (~jasonjckn@8.25.197.24) has joined channel #scala
<wabash> Where is the compiler error?
@@@ hzhao (~hzhao@66.162.159.254) has quit: Ping timeout: 265 seconds
@@@ soheil (~soheil@c-67-169-92-85.hsd1.ca.comcast.net) has quit: Remote host
    closed the connection
@@@ Osum (~radu@cpe-142-105-6-85.nyc.res.rr.com) has joined channel #scala
@@@ soheil (~soheil@c-67-169-92-85.hsd1.ca.comcast.net) has joined channel
    #scala  [22:53]
@@@ Sgeo (~quassel@ool-44c2df0c.dyn.optonline.net) has joined channel #scala
@@@ fizbin (~Adium@pool-96-235-146-249.cmdnnj.east.verizon.net) has quit:
    Quit: Leaving.
@@@ dustin10 (~dustin@2605:6000:0:8::f:9) has quit: Quit: WeeChat 0.4.3
@@@ jmvanel (~jmvanel@175.0.88.79.rev.sfr.net) has quit: Ping timeout: 258
    seconds
@@@ joneshf-laptop (~joneshf@98.255.30.38) has joined channel #scala
@@@ stantonk (~stantonk@208.185.170.2) has quit: Remote host closed the
    connection
@@@ fragamus (~textual@ip-64-134-220-53.public.wayport.net) has joined channel
    #scala  [22:54]
<greg`> ok ill make a new paste with the error in 
@@@ stantonk (~stantonk@208.185.170.2) has joined channel #scala  [22:55]
@@@ bgilbert (~textual@222.sub-70-193-135.myvzw.com) has joined channel #scala
<greg`> two secs
<wabash> NO MORE SEX
@@@ stantonk (~stantonk@208.185.170.2) has quit: Remote host closed the
    connection  [22:56]
@@@ jasonjckn (~jasonjckn@8.25.197.24) has quit: Ping timeout: 264 seconds
<greg`> http://pastebin.com/C47SrZiY  [22:58]
<greg`> that has the compiler error in it also
<greg`> its annoying
@@@ mary5030 (~mary5030@72.32.115.233) has quit: Remote host closed the
    connection
<greg`> slightly different than the first in that im using :: for Cons in the
	second  [22:59]
@@@ bgilbert (~textual@222.sub-70-193-135.myvzw.com) has quit: Ping timeout:
    240 seconds
@@@ kiviuq (~mo@aftr-37-24-151-62.unity-media.net) has joined channel #scala
@@@ SparkySparkyBoom (~sparky@gateway/tor-sasl/nyx114) has quit: Write error:
    Broken pipe  [23:00]
@@@ SparkySparkyBoom (~sparky@gateway/tor-sasl/nyx114) has joined channel
    #scala
@@@ alexyk (~alexyk@50-204-120-254-static.hfc.comcastbusiness.net) has quit:
    Quit: alexyk  [23:01]
<OlegYch> greg`: toList accepts no argument lists
@@@ jasonjckn (~jasonjckn@8.25.197.24) has joined channel #scala
<OlegYch> when you pass () to it you're passing an empty argument list to the
	  result of toList
<wabash> OlegYch: So I'm new to scala as well .In the statement:
	 t().toList(), "toList" is a function, correct?  [23:02]
@@@ robbyoconnor (~wakawaka@guifications/user/r0bby) has joined channel #scala
								        [23:03]
@@@ mizu_no_oto (~textual@c-76-24-18-193.hsd1.ma.comcast.net) has joined
    channel #scala
<OlegYch> no it's a method
<wabash> ok, on the object returned by t()?
@@@ stantonk (~stantonk@208.185.170.2) has joined channel #scala
<OlegYch> right, a method call on object returned by t()  [23:04]
<wabash> ok, cool.
<greg`> this is exercise 1 from chapter 5 of manning functional programming in
	scala
@@@ fragamus (~textual@ip-64-134-220-53.public.wayport.net) has quit: Quit:
    Computer has gone to sleep.
<wabash> and then toList() is calling the method named toList?
@@@ ever (~ever@ipservice-092-211-034-155.pools.arcor-ip.net) has quit: Ping
    timeout: 240 seconds
@@@ _unary_ (~unary@68.67.54.218) has quit: Ping timeout: 245 seconds  [23:05]
<OlegYch> yes, and then calling an apply(whatever) method on its result
<wabash> Where does the apply method come in to play here?
@@@ tsandall (~tsandall@89.100.16.195) has joined channel #scala
<greg`> so how do i fix it im pretty confused
<greg`> do i need to write toList(t())?  [23:06]
@@@ jpfuentes2 (~jacques@static-71-251-230-114.rcmdva.fios.verizon.net) has
    quit: Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦
@@@ zz_sprsquish (~sprsquish@squishtech.com) is now known as sprsquish  [23:07]
@@@ nirvdrum (~nirvdrum@pool-108-20-151-26.bstnma.fios.verizon.net) has joined
    channel #scala  [23:08]
@@@ multibot__ (~PircBot@ec2-54-82-212-241.compute-1.amazonaws.com) has joined
    channel #scala
@@@ mizu_no_oto (~textual@c-76-24-18-193.hsd1.ma.comcast.net) has quit: Quit:
    Computer has gone to sleep.
<OlegYch> () is shorthand to apply()
<greg`> so i need to t().toList(())?  [23:09]
@@@ tsandall (~tsandall@89.100.16.195) has quit: Ping timeout: 250 seconds
<wabash> OlegYch: Thanks!  [23:10]
<OlegYch> greg`: you need t().toList  [23:11]
@@@ multibot_ (~PircBot@ec2-54-242-84-48.compute-1.amazonaws.com) has quit:
    Ping timeout: 240 seconds  [23:12]
@@@ eizo (52e610b0@gateway/web/freenode/ip.82.230.16.176) has quit: Quit: Page
    closed  [23:13]
@@@ primer_ (~will@static-96-239-100-47.nycmny.fios.verizon.net) has quit:
    Ping timeout: 255 seconds
@@@ Squarism (~Squarism4@fh49n2-u-b-td1.ias.bredband.telia.com) has joined
    channel #scala  [23:14]
<greg`> ah ok and that will apply toList #unintuitive
@@@ hzhao_ (~hzhao@66.162.159.254) has quit: Read error: Connection reset by
    peer  [23:15]
<OlegYch> seems pretty intuitive to me
<OlegYch> why did you expect toList to require any parentheses?
<wabash> OlegYch: So in that case, you aren't actually calling toList, are
	 you?  [23:16]
<greg`> because i thought parentheses was how you call a method  [23:17]
<greg`> and that a dot would just reference the method
@@@ hzhao (~hzhao@107-212-41-135.lightspeed.sntcca.sbcglobal.net) has joined
    channel #scala
<greg`> rather a dot without parentheses was how to reference a method
<OlegYch> no methods are allowed to have no argument lists
<greg`> i see  [23:18]
<wabash> OlegYch: Sorry, can yo uclarify?
<wabash> no-arg lists are ok?
@@@ baweaver (~baweaver@159.140.254.109) has quit: Remote host closed the
    connection
<greg`> so to call a method without any arguments you just write it without
	parentheses
<greg`> how does one just reference a method as a first class object then
								        [23:19]
@@@ treehug88 (~treehug88@static-96-239-100-47.nycmny.fios.verizon.net) has
    quit:   [23:20]
@@@ datura (~datura@unaffiliated/datura) has joined channel #scala  [23:21]
@@@ fractalooped (~fractaloo@99-51-184-142.lightspeed.austtx.sbcglobal.net)
    has quit: Ping timeout: 264 seconds  [23:22]
@@@ jedws (~textual@c110-20-183-136.rivrw10.nsw.optusnet.com.au) has joined
    channel #scala
@@@ DigitalKiwi (~kiwi@unaffiliated/digitalkiwi) has quit: Quit: ZNC -
    http://znc.in  [23:25]
@@@ superguenter (~Adium@c-67-180-211-161.hsd1.ca.comcast.net) has joined
    channel #scala  [23:26]
ERC>

*** 
*** 

   
    

*** lazily generating a stream
- Streams allow us to describe inside the list [how] to generate the elements and act as if the elements  already [exist]
- generally laziness allows us to separate then [generation] from [evaluation] of an expression
- when composing lazy functions on a stream
  - we the operations on the elements are interleaved
  - as is the generation of the elements
    - streams are sometimes called first class loops because they encode a loop of generating code in a first class objectr
**** general form for lazy evaluation
recursive
#+BEGIN_SRC scala
def exists(p: A => Boolean): Boolean = this match {
case Cons(h, t) => p(h()) || t().exists(p)
case _ => false
}
#+END_SRC
foldRight
#+BEGIN_SRC scala
def foldRight[B](z: => B)(f: (A, => B) => B): B =
this match {
case Cons(h,t) => f(h(), t().foldRight(z)(f))
case _ => z
}
#+END_SRC
- the functions second argument and the initial value B are lazily evaluated
- if its not the end of the list evaluate the function of
  - head : A
  - the tail of the function evaluated with B
  - this looks just like foldright for lists excepth the [lazy evaluation] of the initialiser
  - if the function chooses not to evaluate its second argument then recursion doesnt occur
  - AHA this is left up to whoever implements f!

exists using foldRight Stream
#+BEGIN_SRC scala
def exists(p: A => Boolean): Boolean =
foldRight(false)((a, b) => p(a) || b
#+END_SRC

- here b only gets evaluated if p(a) is false
- and b  is used to replace the expression
  - due to =code= p(a) || b =code=
- when the or system forces b to evaluate it actually means
  - b().foldRight(z)(f) thus b becomes the new a and a new tail is generated for the next foldRight
*** corecursive functions
#+BEGIN_SRC scala
def unfold[A, S](z: S)(f: S => Option[(A, S)]): Stream[A]
#+END_SRC
- option decides when stream is terminated
- function produces stream elements as long as f terminates
*** what does this mean ?     :drill:
Footnote 8
- Using unfold to define constant and ones means that we don't get sharing as in the recursive definition 
#+BEGIN_SRC scala
 val ones: Stream[Int] = cons(1, ones)
#+END_SRC
-  The recursive definition consumes constant memory even if we keep a reference to it around while traversing it, while the unfold
-based implementation does not. 
- Preserving sharing is not something we usually rely on when programming with streams, since it is extremely delicate and not tracked by the types. For instance, sharing is destroyed when
calling even xs.map(x => x) .
*** hassubsequence implementation
#+BEGIN_SRC scala
def hasSubsequence[A](s: Stream[A]): Boolean =
tails exists (_ startsWith s)
#+END_SRC

- runs in same number of steps as monolithic code
- by uses laziness to drop exit bad routes early
  - we can compose general functions
  - while retaining effciency
** Chapter 6 
*** capturing state
- stateful functions generally have the form
#+BEGIN_SRC 
s -> (y,s)
#+END_SRC

- when we encounter state that we wish to make functional we should define an interface / trait for feeding state around as a parameter
- we seperate the concern of capturing state and doing the computation
#+BEGIN_SRC scala

class Foo {
private var s: FooState = ...
   def bar: Bar
   def baz: Int
}
#+END_SRC
if we have a class where bar and baz mutate s; we can capture the state change in a pure way via:
#+BEGIN_SRC scala
trait Foo {
   def bar: (Bar, Foo)
   def baz: (Int, Foo)
}
#+END_SRC
**** generalising stateful functions into common interfaces
we can generalise the stateful
#+BEGIN_SRC scala
type Rand[+A] = RNG => (A, RNG)
#+END_SRC
here the the function interface is made generic over type A and its subtypes

we use this wherenever there is : 
- a program that usinses some RNG to produce and Answer A and another RNG 
- what we have done is define a generic interface for all programs that have this shape
 - that take some type RNG and produce RNG and Answer of type A

****** making instances of generalised interfaces
we can think of it of as different functions/machines that conform to the interface

*******  the nextInt machine
methods such has rngNext int can now be put into this interface via:
#+BEGIN_SRC scala
val fGetInt: Rand[Int] = _.nextInt
#+END_SRC
this translates to 
#+BEGIN_SRC 
val fGetInt: RNG => (Int+,RNG)
#+END_SRC

******* the unit machine
create a function factory that takes a constant and returns a machine that 
just returns that constant along with the current value of RNG
#+BEGIN_SRC 
def unit[A](a: A): Rand[A] =
rng => (a, rng)
#+END_SRC

******* mapping a function over a state
recall that Rand[A] is an alias for some stateful function
hence:
#+BEGIN_SRC scala
def map[A,B](s: Rand[A])(f: A => B): Rand[B] =
rng => {
val (a, rng2) = s(rng)
(f(a), rng2)
}
#+END_SRC
- essentially changes a its input by RAND[A] to Rand[B]

******* TODO is this really function composition as the title suggests?
I really dont think so


**** using for/do constructs
remmeber that we use 
- map to strip one layer apply a function and return the context 
- flatmap to combine a functor with a function that produces a functor

given that we have flatmap and ??? we can now rewrite
#+BEGIN_SRC scala
val ns: Rand[List[Int]] =
int.flatMap(x =>
int.flatMap(y =>
ints(x).map(xs =>
xs.map(_ % y))))
#+END_SRC

as:
#+BEGIN_SRC scala
val ns: Rand[List[Int]] = for {
x <- int
y <- int
xs <- ints(x)
} yield xs.map(_ % y)
#+END_SRC

both 
- generate an integer x,
- generate an integer y
- create a list of random integers x length
- map the modulus of y across integers

although using the for construct is a lot easier
***** tooling
now we have the for construct we should develop tools to use it
we include some utility functions
these functions are just normal stateful operations however when thrown into the stream of processing 
their only job is to manipulate the state they are not concerned with answers i.e. the first element of the tuple 
******* get and set 
to get and set the state during our imperative style programming



#+BEGIN_SRC scala
def get[S]: State[S, S] = State(s => (s, s))
#+END_SRC

#+BEGIN_SRC scala
def set[S](s: S): State[S, Unit] = State(_ => ((), s))
#+END_SRC
